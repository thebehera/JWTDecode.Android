apply plugin: 'com.android.library'
apply from: '../scripts/jacoco.gradle'

def semver = defineVersion()
version = semver.stringVersion

android {
    compileSdkVersion 25
    buildToolsVersion "25"
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.android.support:appcompat-v7:25.0.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'org.robolectric:robolectric:3.1.4'
    testCompile 'org.mockito:mockito-core:2.2.5'
}

def defineVersion() {
    def current = describeGit(false)
    def snapshot = current == null
    if (snapshot) {
        current = describeGit(snapshot, "0.0.1")
    }
    return new Semver(snapshot: snapshot, version: current)
}

def describeGit(boolean snapshot, String defaultValue = null) {
    def arguments = ['describe', '--tags']
    arguments.add(snapshot ? '--abbrev=0' : '--exact-match')
    def stdout = new ByteArrayOutputStream()
    def string = defaultValue
    try {
        def result = project.exec {
            executable = 'git'
            args = arguments
            standardOutput = stdout
        }

        result.assertNormalExitValue()

        if (stdout.toByteArray().length > 0) {
            string = stdout.toString().replace("\n", "")
        }
    } catch (Exception e) {
        logger.debug("Failed git describe command", e)
    } finally {
        stdout.close()
    }
    return string
}

class Semver {
    def version
    def snapshot

    def getStringVersion() {
        return snapshot ? version + "-SNAPSHOT" : version
    }
}

apply from: '../scripts/maven.gradle'
apply from: '../scripts/bintray.gradle'